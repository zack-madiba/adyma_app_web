# Generated by Django 3.2 on 2021-05-02 19:28

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Activite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name="Nom de l'activité")),
                ('descriptif', models.TextField(null=True, verbose_name="Description de l'activité")),
                ('horaire', models.DateField(default=django.utils.timezone.now, verbose_name='Horaire')),
            ],
            options={
                'verbose_name': 'Activité',
            },
        ),
        migrations.CreateModel(
            name='Beneficiaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date inscription')),
                ('nom', models.CharField(max_length=100, null=True, verbose_name='Nom')),
                ('prenom', models.CharField(max_length=100, null=True, verbose_name='Prenom')),
                ('date_naissance', models.DateField(blank=True, null=True, verbose_name='Date de naissance')),
                ('appartement', models.PositiveIntegerField()),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, null=True, region=None, verbose_name='Num. Tél.')),
                ('maladie_path', models.CharField(max_length=300, verbose_name='Maladie/Pathologie')),
                ('hospitalisation_année', models.PositiveIntegerField(verbose_name="Hospitalisation dans l'année")),
                ('chute_annuel', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name="Chutes dans l'année")),
                ('kiné', models.BooleanField(max_length=3)),
                ('metre_outil', models.CharField(choices=[('ok', 'ok'), ('non ok', 'non ok')], max_length=10, null=True, verbose_name='5 mètres – outils – levers de chaise')),
                ('nb_activité_residence', models.PositiveIntegerField(verbose_name="nombre d'activitées dans la residence")),
                ('nb_sorties_semaine', models.PositiveIntegerField(verbose_name='Nombre de sorties par semaine')),
                ('durée_sortie_moy_minut', models.PositiveIntegerField(verbose_name='Durée des sorties en moyenne (en minutes)')),
                ('sol_relevé', models.CharField(choices=[('ok', 'ok'), ('non ok', 'non ok')], max_length=50, verbose_name='Aller au sol et se relever')),
                ('inte_proj', multiselectfield.db.fields.MultiSelectField(choices=[('équilibre', 'équilibre'), ('marcher', 'marcher'), ('sortir', 'sortir'), ('rencontre', 'rencontre'), ("bouger - m'entretenir", "bouger - m'entretenir"), ('aucun intérêt', 'aucun intérêt')], max_length=300, verbose_name='Intérêt du projet')),
                ('frein_mob', multiselectfield.db.fields.MultiSelectField(choices=[('peur de tomber', 'peur de tomber'), ("perte de motivation lié à l'isolement", "perte de motivation lié à l'isolement"), ('fatigabilité', 'fatigabilité'), ('perte de sens et intérêt', 'perte de sens et intérêt'), ('aucun frein', 'aucun frein'), ('douleurs', 'douleurs')], max_length=300, verbose_name='Freins à la mobilité')),
                ('them_trav_souh', multiselectfield.db.fields.MultiSelectField(choices=[('souplesse', 'souplesse'), ('renforcement musculaire', 'renforcement musculaire'), ('gestes quotidiens', 'gestes quotidiens'), ('remobilsation et reconditionnement', 'remobilisation et reconditionnement'), ('enduance, gestion, effort', 'endurance, gestion, effort'), ('gestion du stress', 'gestion du stress'), ('coordination', 'coordination')], max_length=300, verbose_name='Thème de travail souhaité')),
                ('orientation', models.CharField(choices=[('individuel', 'individuel'), ('collectif', 'collectif')], max_length=50, verbose_name='Orientation')),
                ('contractualisation', models.BooleanField(max_length=50, verbose_name='Contractualisation')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Commentaire')),
                ('coach', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Entretien initial individuel',
                'verbose_name_plural': 'Entretien initial individuel',
                'ordering': ['nom', 'prenom'],
            },
        ),
        migrations.CreateModel(
            name='Etablissement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom_etablissement', models.CharField(max_length=100, verbose_name="Nom de l'éetablissement")),
                ('nom_directeur', models.CharField(max_length=100, verbose_name='Nom du diresteur')),
                ('adresse', models.CharField(max_length=100, verbose_name='Adresse')),
                ('ville', models.CharField(max_length=50)),
                ('descriptif', models.TextField(null=True, verbose_name="Description de l'établissement")),
            ],
            options={
                'verbose_name': 'Etablissement',
                'verbose_name_plural': 'Etablissement',
                'ordering': ['nom_etablissement'],
            },
        ),
        migrations.CreateModel(
            name='Groupe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom_groupe', models.CharField(max_length=100)),
                ('description', models.TextField(verbose_name='Description du groupe')),
                ('activite', models.ManyToManyField(to='adyma.Activite', verbose_name='les Activités du groupe')),
            ],
            options={
                'verbose_name': "Groupe au sein de l'établissement",
                'verbose_name_plural': "Groupe au sein de l'établissement",
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tug', models.FloatField(help_text='Durée en secondes', verbose_name='Time Up and GO')),
                ('relev_chaise', models.PositiveIntegerField(verbose_name='Relevé de chaise par minute')),
                ('Aller_soll', models.CharField(choices=[('ok', 'ok'), ('non ok', 'non ok')], max_length=50, verbose_name='Aller au sol')),
                ('peri_marche', models.PositiveIntegerField(help_text='durée maximale de marche estimée par la personne (durée en min / heures)', null=True, verbose_name='Périmétrage de marche min/heures (facultatif)')),
                ('beneficiaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='adyma.beneficiaire')),
                ('coach', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Suivi fiche test',
                'verbose_name_plural': 'Suivi fiche test',
            },
        ),
        migrations.CreateModel(
            name='Structurel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Date du diagnostique structurel')),
                ('adaptat_env', models.FloatField(choices=[(1, 'Espace bien adapté'), (0.5, 'espace peu adapté'), (0, 'Espace pas du tout adapté')], verbose_name="Adaptabilité de l'environnement et de la structure à la mobilité (escaliers, barres d'appuis, luminosité...)")),
                ('nbe_act', models.FloatField(choices=[(1, '4 et +'), (0.5, 'Entre 2 et 4'), (0, '2 ou moins')], verbose_name="Nombre d'activité (mémoire, gym, informatique...) par semaine proposées")),
                ('salle_act', models.FloatField(choices=[(1, 'Salle bien adapté'), (0.5, 'Salle peu adaptée'), (0, 'Pas de salle réservée')], verbose_name="Salle d'activité réservée pour les activités physiques")),
                ('materiel_act', models.FloatField(choices=[(1, '2 matériels ou +'), (0.5, '1 matériel'), (0, 'Pas de matériel')], verbose_name="Matériel d'activité physique (tapis,machines, espalier...)")),
                ('lien_reg', models.FloatField(choices=[(1, '2 ou +'), (0.5, '1'), (0, '0')], verbose_name='Liens réguliers avec organisation extérieure (centresocial, amicale...)')),
                ('nbe_externes', models.FloatField(choices=[(1, '4 ou +'), (0.5, 'Quelques unes'), (0, 'aucune')], verbose_name="Nombre de personnes extérieures venant régulièrement dans l'établissement")),
                ('sortie_sejour', models.FloatField(choices=[(1, '2 et +'), (0.5, '1'), (0, '0')], verbose_name="Sorties et séjours organisés dans l'année")),
                ('nbe_commerces', models.FloatField(choices=[(1, '3 et +'), (0.5, '1 ou 2'), (0, '0')], verbose_name='Nombre de commerces de proximité (<250 mètres)')),
                ('nbe_parc', models.FloatField(choices=[(1, '2 et +'), (0.5, '1'), (0, '0')], verbose_name='Nombre de parcs à proximité (<500 mètres)')),
                ('trans_commun', models.FloatField(choices=[(1, '< 100 mètres'), (0.5, 'Entre 250 et 500 mètres'), (0, '> 500 mètres')], verbose_name='Transports en commun à proximité')),
                ('nom_etablissement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='adyma.etablissement', verbose_name="Nom de l'etablissement")),
            ],
            options={
                'verbose_name': 'Diagnostic structurel établissement',
            },
        ),
        migrations.CreateModel(
            name='Psychosocial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_jour', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date du diagnostic')),
                ('instru_marche', models.BooleanField(verbose_name='Instrument de Marche')),
                ('duree_moy_sorti_ext', models.FloatField(choices=[(1, '> 1H'), (0.5, '> 30 min'), (0, '< 30 min')], verbose_name='Durée moyenne des sorties extérieures( en minutes)')),
                ('sorties_par_sem', models.FloatField(choices=[(1, '3 fois ou plus'), (0.5, 'Entre 1 et 3 fois'), (0, '1 ou moins')], verbose_name='Nombre de sorties (en moyenne) par semaine')),
                ('chute_annuel', models.FloatField(choices=[(1, '0'), (0.5, '1 à 3'), (0, '+ de 3')], verbose_name="Nombre de chutes dans l'année")),
                ('nbe_hospitali', models.FloatField(choices=[(1, '0'), (0.5, '1 à 3'), (0, '+ de 3')], verbose_name="Nombre d'hospitalisation dans l'année")),
                ('durée_marche', models.FloatField(choices=[(1, '> 1H'), (0.5, '> 30 min'), (0, '< 30 min')], verbose_name='Durée de marche maximale estimée')),
                ('marche_canne', models.FloatField(choices=[(1, 'oui'), (0, 'non')], verbose_name='Marche avec canne ?')),
                ('deambulateur', models.FloatField(choices=[(1, 'oui'), (0, 'non')], verbose_name='Marche avec déambulteur ?')),
                ('cap_sol_releve', models.FloatField(choices=[(1, 'oui facilement'), (0.5, 'oui avec quelques difficultés'), (0, 'non')], verbose_name='Capacité à aller au sol et se releve')),
                ('envie_sortir', models.FloatField(choices=[(1, 'oui'), (0.5, 'doutes'), (0, 'non')], verbose_name="Envie de sortir et d'entretenir ma capacité à marcher/bouger")),
                ('envie_groupe', models.FloatField(choices=[(1, 'oui'), (0.5, 'doutes'), (0, 'non')], verbose_name='Envie de retrouver régulièrement un partenaire ou groupe pour marcher/bouger')),
                ('desequilibre', models.FloatField(choices=[(1, 'non'), (0.5, 'quelques fois'), (0, 'oui')], verbose_name='Avez-vous des déséquilibres dans vos déplacements au quotidien')),
                ('quartier', models.FloatField(choices=[(1, 'oui'), (0.5, 'un peu'), (0, 'non')], verbose_name='Connaissez-vous bien ce quartier')),
                ('alimentation', models.FloatField(choices=[(1, 'ok'), (0, 'non ok')])),
                ('repos', models.FloatField(choices=[(1, 'ok'), (0, 'non ok')])),
                ('beneficiaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='adyma.beneficiaire')),
            ],
            options={
                'verbose_name': 'Fiche de diagnostic psychosocial',
                'verbose_name_plural': 'Fiche de diagnostic psychosocial',
                'ordering': ['beneficiaire'],
            },
        ),
        migrations.CreateModel(
            name='Presence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Date de séance')),
                ('descriptif', models.TextField(null=True, verbose_name="Description de l'activité")),
                ('activite', models.ManyToManyField(to='adyma.Activite', verbose_name='Activité')),
                ('groupe', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='adyma.groupe', verbose_name='Groupe')),
            ],
        ),
        migrations.CreateModel(
            name='Physique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(verbose_name='Date inscription')),
                ('lever_chaise', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name="Se lever d'une chaise")),
                ('debout_immoble', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='Tenir debour immobile')),
                ('tourner_tete', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='Tourner la tête à gauche et à droite')),
                ('main_nuq', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name="Passer une main puis l'autre vers la nuque")),
                ('enr_vertebral', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='Enroulement_vertebral')),
                ('marcher_droit', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='Marcher en ligne droite')),
                ('releve_pied', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='Relevé du pied / hauteur du pas')),
                ('long_pas', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='Longueur du pas')),
                ('regard_horizont', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='Regerd horizontal')),
                ('coord_bras_jamb', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='Coordination bras/jambes')),
                ('alig_vert', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='Alignement vertebral')),
                ('respiration', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='Respiration')),
                ('march_droit_yeu_fermé', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='Marcher en ligne droite yeux fermés')),
                ('marc_arriére', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='Marcher en ligne droite en arrière')),
                ('fent_jamb_droit', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='Tenir 10 secondes en fente avant jambe droite')),
                ('fent_jamb_gauche', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='Tenir 10 secondes en fente avant jambe gauche')),
                ('cap_sol_lever', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name="Capacité d'aller au sol et se lever")),
                ('essouff', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='essoufflement et/ou rougeur en fin de session')),
                ('nbe_chute_ann', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name="Nombre de chutes dans l'année")),
                ('depl_dehors', models.FloatField(choices=[(1, 'Sans déséquilibre ni difficulté'), (0.5, 'Quelques déséquilibres et/ou difficultés'), (0, 'Déséquilibres et/ou des difficultés')], verbose_name='Deplacement dehors au quotidien')),
                ('beneficiaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='adyma.beneficiaire')),
            ],
            options={
                'verbose_name': 'Diagnostic individuel physique Résidence',
            },
        ),
        migrations.AddField(
            model_name='etablissement',
            name='groupe',
            field=models.ManyToManyField(to='adyma.Groupe', verbose_name='Groupe'),
        ),
        migrations.AddField(
            model_name='beneficiaire',
            name='groupe',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='adyma.groupe'),
        ),
        migrations.AddField(
            model_name='beneficiaire',
            name='residence',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='adyma.etablissement', verbose_name='Résidence'),
        ),
    ]
